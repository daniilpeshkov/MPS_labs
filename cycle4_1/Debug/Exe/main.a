;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/7/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// Declare your global variables here
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0026 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0027 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0028 // Delay needed for the stabilization of the ADC input voltage
; 0000 0029 //delay_us(10);
; 0000 002A // Start the AD conversion
; 0000 002B ADCSRA|=(1<<ADSC);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002C // Wait for the AD conversion to complete
; 0000 002D //while ((ADCSRA & (1<<ADIF))==0);
; 0000 002E ADCSRA|=(1<<ADIF);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 002F return ADCW;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0030 }
;PCODE: $0000001C VOL: 0
;
;void sent_data (unsigned int data) {
; 0000 0032 void sent_data (unsigned int data) {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0033     unsigned char data1 = (data >> 8) & 0xFF;
; 0000 0034     unsigned char data2 = data & 0xFF;
; 0000 0035     PORTB.2 = 0;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;	data -> Y+2
;	data1 -> R17
;	data2 -> R16
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0036     SPDR = data1; //send first byte
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0037     while (!(SPSR & (1<<SPIF)));
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0038     SPDR = data2; //send second byte
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0039     while (!(SPSR & (1<<SPIF)));
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 003A     PORTB.2 = 1;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 003B }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;
;
;#include <stdio.h>
;// SPI functions
;#include <spi.h>
;
;void main(void)
; 0000 0043 {
;PCODE: $00000044 VOL: 0
; 0000 0044     // Declare your local variables here
; 0000 0045     unsigned int adc_data;
; 0000 0046     // Crystal Oscillator division factor: 1
; 0000 0047     #pragma optsize-
; 0000 0048     CLKPR=(1<<CLKPCE);
;	adc_data -> R16,R17
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0049     CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 004A     #ifdef _OPTIMIZE_SIZE_
; 0000 004B     #pragma optsize+
; 0000 004C     #endif
; 0000 004D 
; 0000 004E     // Input/Output Ports initialization
; 0000 004F     // Port B initialization
; 0000 0050     // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=In Bit0=In
; 0000 0051     DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0052     // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=0 Bit1=T Bit0=T
; 0000 0053     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0054 
; 0000 0055     // Port C initialization
; 0000 0056     // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0057     DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0058     // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0059     PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 005A 
; 0000 005B     // Port D initialization
; 0000 005C     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 005D     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 005E     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005F     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0060 
; 0000 0061     // USART initialization
; 0000 0062     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0063     // USART Receiver: Off
; 0000 0064     // USART Transmitter: On
; 0000 0065     // USART0 Mode: Asynchronous
; 0000 0066     // USART Baud Rate: 9600
; 0000 0067     UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0068     UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0069     UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 006A     UBRR0H=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 006B     UBRR0L=0x33;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 006C 
; 0000 006D     // ADC initialization
; 0000 006E     // ADC Clock frequency: 125.000 kHz
; 0000 006F     // ADC Voltage Reference: AREF pin
; 0000 0070     // ADC Auto Trigger Source: ADC Stopped
; 0000 0071     // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 0072     // ADC4: On, ADC5: On
; 0000 0073     DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0074     ADMUX=ADC_VREF_TYPE;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0075     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0076     ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0077 
; 0000 0078     // SPI initialization
; 0000 0079     // SPI Type: Master
; 0000 007A     // SPI Clock Rate: 500.000 kHz
; 0000 007B     // SPI Clock Phase: Cycle Start
; 0000 007C     // SPI Clock Polarity: Low
; 0000 007D     // SPI Data Order: MSB First
; 0000 007E     SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (1<<SPR0);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 007F     SPSR=(0<<SPI2X);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0080 
; 0000 0081     while (1) {
;PCODE: $0000006B VOL: 0
; 0000 0082     	adc_data = read_adc(0);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0083         adc_data <<= 2;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0084         adc_data |= 0x3000;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0085     	sent_data(adc_data);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0086 	}
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0087 }
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
