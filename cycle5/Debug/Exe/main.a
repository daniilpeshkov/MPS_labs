;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <math.h>
;#include <delay.h>
;
;unsigned long int millis = 0;
;interrupt [TIM0_COMPA] void timer0_compa_isr(void) {
; 0000 0006 interrupt [15] void timer0_compa_isr(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0007 	++millis;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0008 }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;
;unsigned int adc_data[2];
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;interrupt [ADC_INT] void adc_isr(void) {
; 0000 000D interrupt [22] void adc_isr(void) {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 000E     static unsigned char input_index=0;
; 0000 000F     input_index += 1;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0010     input_index &= 1;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0011 
; 0000 0012     adc_data[input_index]=ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0013 
; 0000 0014     ADMUX=(input_index | ADC_VREF_TYPE);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0015     ADCSRA|=(1<<ADSC);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0016 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;
;void send_data (unsigned int data) {
; 0000 0018 void send_data (unsigned int data) {
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0019     unsigned char data1 = (data >> 8) & 0xFF;
; 0000 001A     unsigned char data2 = data & 0xFF;
; 0000 001B     PORTB.2 = 0;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;	data -> Y+2
;	data1 -> R17
;	data2 -> R16
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 001C     SPDR = data1;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 001D     while (!(SPSR & (1<<SPIF)));
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 001E     SPDR = data2;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 001F     while (!(SPSR & (1<<SPIF)));
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0020     PORTB.2 = 1;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0021 }
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;
;#define SAW	0
;#define SIN	1
;#define MIN_MOD		300
;#define MAX_MOD		10000.f
;
;void main(void) {
; 0000 0028 void main(void) {
;PCODE: $00000055 VOL: 0
; 0000 0029     unsigned int tmp, sig_mod;
; 0000 002A 
; 0000 002B     float t;
; 0000 002C 
; 0000 002D     #pragma optsize-
; 0000 002E     CLKPR=(1<<CLKPCE);
;PCODE: $00000056 VOL: 0
;	tmp -> R16,R17
;	sig_mod -> R18,R19
;	t -> Y+0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 002F     CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0030     #ifdef _OPTIMIZE_SIZE_
; 0000 0031     #pragma optsize+
; 0000 0032     #endif
; 0000 0033 
; 0000 0034     DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0035     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0036     DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0037     PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0038     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0039     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 003A 
; 0000 003B     // Timer/Counter 0 initialization
; 0000 003C     // Clock source: System Clock
; 0000 003D     // Clock value: 1000.000 kHz
; 0000 003E     // Mode: CTC top=OCR0A
; 0000 003F     // OC0A output: Disconnected
; 0000 0040     // OC0B output: Disconnected
; 0000 0041     // Timer Period: 0.1 ms
; 0000 0042     TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (1<<WGM01) | (0<<WGM00);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0043     TCCR0B=(0<<WGM02) | (0<<CS02) | (1<<CS01) | (0<<CS00);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0044     TCNT0=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0045     OCR0A=0x63;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0046     OCR0B=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0047 
; 0000 0048     // Timer/Counter 0 Interrupt(s) initialization
; 0000 0049     TIMSK0=(0<<OCIE0B) | (1<<OCIE0A) | (0<<TOIE0);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 004A 
; 0000 004B     // ADC initialization
; 0000 004C     // ADC Clock frequency: 1000.000 kHz
; 0000 004D     // ADC Voltage Reference: AREF pin
; 0000 004E     // ADC Auto Trigger Source: Free Running
; 0000 004F     // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 0050     // ADC4: On, ADC5: On
; 0000 0051     DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0052     ADMUX= ADC_VREF_TYPE;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0053     ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0054     ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0055 
; 0000 0056     // SPI initialization
; 0000 0057     // SPI Type: Master
; 0000 0058     // SPI Clock Rate: 2*2000.000 kHz
; 0000 0059     // SPI Clock Phase: Cycle Start
; 0000 005A     // SPI Clock Polarity: Low
; 0000 005B     // SPI Data Order: MSB First
; 0000 005C     SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 005D     SPSR=(1<<SPI2X);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 005E 
; 0000 005F 	#asm("sei")
;PCODE: $0000007F VOL: 0
	sei
;PCODE: $00000080 VOL: 0
; 0000 0060 
; 0000 0061     while (1) {
;PCODE: $00000081 VOL: 0
; 0000 0062     	//adc_data is the amplitude of signal
; 0000 0063         sig_mod = MAX_MOD * (adc_data[1] / 1024.0);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0064         t = (millis % sig_mod) / (float)sig_mod;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0065         switch(PIND.0) {
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0066         case SAW:
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0067         	tmp = t * adc_data[0];
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0068         	break;
;PCODE: $000000A0 VOL: 0
; 0000 0069         case SIN:
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 006A             tmp = (sin(2*PI*t) + 1.0) / 2.0 * adc_data[0];
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 006B         	break;
;PCODE: $000000B4 VOL: 0
; 0000 006C         }
;PCODE: $000000B5 VOL: 0
; 0000 006D 
; 0000 006E         tmp <<= 2;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 006F         tmp |= 0x3000;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0070 
; 0000 0071         send_data(tmp);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0072     }
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0073 }
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
