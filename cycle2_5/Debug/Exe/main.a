;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 9/17/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// Declare your global variables here
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// ADC interrupt service routine
;interrupt [ADC_INT] void adc_isr(void)
; 0000 0026 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0027 unsigned int adc_data;
; 0000 0028 // Read the AD conversion result
; 0000 0029 adc_data=ADCW;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	adc_data -> R16,R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002A // Place your code here
; 0000 002B     printf("%d\r\n", adc_data);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002C }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;void main(void)
; 0000 002F {
;PCODE: $00000021 VOL: 0
; 0000 0030 // Declare your local variables here
; 0000 0031 
; 0000 0032 // Crystal Oscillator division factor: 1
; 0000 0033 #pragma optsize-
; 0000 0034 CLKPR=(1<<CLKPCE);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0035 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0036 #ifdef _OPTIMIZE_SIZE_
; 0000 0037 #pragma optsize+
; 0000 0038 #endif
; 0000 0039 
; 0000 003A // Input/Output Ports initialization
; 0000 003B // Port B initialization
; 0000 003C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 003D DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 003E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 003F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0040 
; 0000 0041 // Port C initialization
; 0000 0042 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0043 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0044 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0045 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0046 
; 0000 0047 // Port D initialization
; 0000 0048 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0049 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 004A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 004B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 004C 
; 0000 004D // USART initialization
; 0000 004E // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 004F // USART Receiver: Off
; 0000 0050 // USART Transmitter: On
; 0000 0051 // USART0 Mode: Asynchronous
; 0000 0052 // USART Baud Rate: 9600
; 0000 0053 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0054 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0055 UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0056 UBRR0H=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0057 UBRR0L=0x33;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0058 
; 0000 0059 // ADC initialization
; 0000 005A // ADC Clock frequency: 1000.000 kHz
; 0000 005B // ADC Voltage Reference: AREF pin
; 0000 005C // ADC Auto Trigger Source: Free Running
; 0000 005D // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 005E // ADC4: On, ADC5: On
; 0000 005F DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0060 ADMUX=ADC_VREF_TYPE;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0061 ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0062 ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0063 
; 0000 0064 // Global enable interrupts
; 0000 0065 #asm("sei")
;PCODE: $00000044 VOL: 0
	sei
;PCODE: $00000045 VOL: 0
; 0000 0066 
; 0000 0067 while (1)
;PCODE: $00000046 VOL: 0
; 0000 0068       {
; 0000 0069       // Place your code here
; 0000 006A 
; 0000 006B       }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 006C }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
