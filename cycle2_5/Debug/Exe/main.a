;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 9/17/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;#define FIRST_ADC_INPUT 3
;#define LAST_ADC_INPUT 4
;unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// ADC interrupt service routine
;// with auto input scanning
;interrupt [ADC_INT] void adc_isr(void)
; 0000 002D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002E static unsigned char input_index=0;
; 0000 002F // Read the AD conversion result
; 0000 0030 adc_data[input_index]=ADCW;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0031 // Select next ADC input
; 0000 0032 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0033    input_index=0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0034 ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0035 // Delay needed for the stabilization of the ADC input voltage
; 0000 0036 delay_us(10);
;PCODE: $00000021 VOL: 0
; 0000 0037 // Start the AD conversion
; 0000 0038 ADCSRA|=(1<<ADSC);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0039 }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;
;#include <delay.h>
;
;void main(void)
; 0000 003E {
;PCODE: $00000028 VOL: 0
; 0000 003F // Declare your local variables here
; 0000 0040 
; 0000 0041 char buf1[100];
; 0000 0042 char buf2[100];
; 0000 0043 
; 0000 0044 // Crystal Oscillator division factor: 1
; 0000 0045 #pragma optsize-
; 0000 0046 CLKPR=(1<<CLKPCE);
;PCODE: $00000029 VOL: 0
;	buf1 -> Y+100
;	buf2 -> Y+0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0047 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0048 #ifdef _OPTIMIZE_SIZE_
; 0000 0049 #pragma optsize+
; 0000 004A #endif
; 0000 004B 
; 0000 004C // Input/Output Ports initialization
; 0000 004D // Port B initialization
; 0000 004E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 004F DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0050 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0051 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0052 
; 0000 0053 // Port C initialization
; 0000 0054 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0055 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0056 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0057 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0058 
; 0000 0059 // Port D initialization
; 0000 005A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 005B DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 005C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005D PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 005E 
; 0000 005F // Timer/Counter 0 initialization
; 0000 0060 // Clock source: System Clock
; 0000 0061 // Clock value: Timer 0 Stopped
; 0000 0062 // Mode: Normal top=0xFF
; 0000 0063 // OC0A output: Disconnected
; 0000 0064 // OC0B output: Disconnected
; 0000 0065 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0066 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0067 TCNT0=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0068 OCR0A=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0069 OCR0B=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 006A 
; 0000 006B // Timer/Counter 1 initialization
; 0000 006C // Clock source: System Clock
; 0000 006D // Clock value: Timer1 Stopped
; 0000 006E // Mode: Normal top=0xFFFF
; 0000 006F // OC1A output: Disconnected
; 0000 0070 // OC1B output: Disconnected
; 0000 0071 // Noise Canceler: Off
; 0000 0072 // Input Capture on Falling Edge
; 0000 0073 // Timer1 Overflow Interrupt: Off
; 0000 0074 // Input Capture Interrupt: Off
; 0000 0075 // Compare A Match Interrupt: Off
; 0000 0076 // Compare B Match Interrupt: Off
; 0000 0077 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0078 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0079 TCNT1H=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 007A TCNT1L=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 007B ICR1H=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 007C ICR1L=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 007D OCR1AH=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 007E OCR1AL=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 007F OCR1BH=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0080 OCR1BL=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0081 
; 0000 0082 // Timer/Counter 2 initialization
; 0000 0083 // Clock source: System Clock
; 0000 0084 // Clock value: Timer2 Stopped
; 0000 0085 // Mode: Normal top=0xFF
; 0000 0086 // OC2A output: Disconnected
; 0000 0087 // OC2B output: Disconnected
; 0000 0088 ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0089 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 008A TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 008B TCNT2=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 008C OCR2A=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 008D OCR2B=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 008E 
; 0000 008F // Timer/Counter 0 Interrupt(s) initialization
; 0000 0090 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0091 
; 0000 0092 // Timer/Counter 1 Interrupt(s) initialization
; 0000 0093 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0094 
; 0000 0095 // Timer/Counter 2 Interrupt(s) initialization
; 0000 0096 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0097 
; 0000 0098 // External Interrupt(s) initialization
; 0000 0099 // INT0: Off
; 0000 009A // INT1: Off
; 0000 009B // Interrupt on any change on pins PCINT0-7: Off
; 0000 009C // Interrupt on any change on pins PCINT8-14: Off
; 0000 009D // Interrupt on any change on pins PCINT16-23: Off
; 0000 009E EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 009F EIMSK=(0<<INT1) | (0<<INT0);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00A0 PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00A1 
; 0000 00A2 // USART initialization
; 0000 00A3 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00A4 // USART Receiver: Off
; 0000 00A5 // USART Transmitter: On
; 0000 00A6 // USART0 Mode: Asynchronous
; 0000 00A7 // USART Baud Rate: 9600
; 0000 00A8 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00A9 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00AA UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00AB UBRR0H=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00AC UBRR0L=0x33;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00AD 
; 0000 00AE // Analog Comparator initialization
; 0000 00AF // Analog Comparator: Off
; 0000 00B0 // The Analog Comparator's positive input is
; 0000 00B1 // connected to the AIN0 pin
; 0000 00B2 // The Analog Comparator's negative input is
; 0000 00B3 // connected to the AIN1 pin
; 0000 00B4 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00B5 // Digital input buffer on AIN0: On
; 0000 00B6 // Digital input buffer on AIN1: On
; 0000 00B7 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00B8 
; 0000 00B9 // ADC initialization
; 0000 00BA // ADC Clock frequency: 1000.000 kHz
; 0000 00BB // ADC Voltage Reference: AREF pin
; 0000 00BC // ADC Auto Trigger Source: Free Running
; 0000 00BD // Digital input buffers on ADC0: Off, ADC1: Off, ADC2: Off, ADC3: On
; 0000 00BE // ADC4: On, ADC5: Off
; 0000 00BF DIDR0=(1<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (1<<ADC2D) | (1<<ADC1D) | (1<<ADC0D);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00C0 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00C1 ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00C2 ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00C3 
; 0000 00C4 // SPI initialization
; 0000 00C5 // SPI disabled
; 0000 00C6 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00C7 
; 0000 00C8 // TWI initialization
; 0000 00C9 // TWI disabled
; 0000 00CA TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00CB 
; 0000 00CC // Alphanumeric LCD initialization
; 0000 00CD // Connections are specified in the
; 0000 00CE // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00CF // RS - PORTC Bit 0
; 0000 00D0 // RD - PORTC Bit 1
; 0000 00D1 // EN - PORTC Bit 2
; 0000 00D2 // D4 - PORTD Bit 4
; 0000 00D3 // D5 - PORTD Bit 5
; 0000 00D4 // D6 - PORTD Bit 6
; 0000 00D5 // D7 - PORTD Bit 7
; 0000 00D6 // Characters/line: 20
; 0000 00D7 lcd_init(20);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00D8 lcd_gotoxy(0,0);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00D9 lcd_puts("Hello");
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00DA // Global enable interrupts
; 0000 00DB #asm("sei")
;PCODE: $00000093 VOL: 0
	sei
;PCODE: $00000094 VOL: 0
; 0000 00DC 
; 0000 00DD while (1)
;PCODE: $00000095 VOL: 0
; 0000 00DE       {
; 0000 00DF       // Place your code here
; 0000 00E0 
; 0000 00E1         sprintf(buf1, "%.2f V", adc_data[0]* 5. / 1024.);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00E2         sprintf(buf2, "%.2f V", adc_data[1]* 5. / 1024.);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00E3         #asm("cli")
;PCODE: $000000B9 VOL: 0
	cli
;PCODE: $000000BA VOL: 0
; 0000 00E4         lcd_gotoxy(0,0);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00E5         lcd_puts(buf1);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00E6 
; 0000 00E7         lcd_gotoxy(0,1);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00E8         lcd_puts(buf2);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00E9         #asm("sei")
;PCODE: $000000C7 VOL: 0
	sei
;PCODE: $000000C8 VOL: 0
; 0000 00EA         delay_ms(50);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00EB       }
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00EC }
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0

	.DSEG
_0x4:
	.BYTE 0x6
