;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <alcd.h>
;#include <twi.h>
;#include <ds1621_twi.h>
;#include <delay.h>
;
;char lcd_buf[50];
;
;void sprint_temp(char *buf, int temp, int index) {
; 0000 000A void sprint_temp(char *buf, int temp, int index) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000B     char t_f, t_i, neg = ' ';
; 0000 000C 	t_f = temp % 10;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	*buf -> Y+8
;	temp -> Y+6
;	index -> Y+4
;	t_f -> R17
;	t_i -> R16
;	neg -> R19
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 000D 	t_i = (temp / 10);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 000E     if ((t_i < 0) && (t_f != 0)) {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 000F     	t_i += 1;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0010         if (t_i == 0) neg = '-';
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0011     }
;PCODE: $00000029 VOL: 0
; 0000 0012     sprintf(buf, "t%d = %c%d.%d", index, neg, t_i, t_f);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0013 }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;
;void main(void) {
; 0000 0015 void main(void) {
;PCODE: $00000044 VOL: 0
; 0000 0016     // Declare your local variables here
; 0000 0017     int t0, t1;
; 0000 0018     // Crystal Oscillator division factor: 1
; 0000 0019     #pragma optsize-
; 0000 001A     CLKPR=(1<<CLKPCE);
;	t0 -> R16,R17
;	t1 -> R18,R19
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 001B     CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 001C     #ifdef _OPTIMIZE_SIZE_
; 0000 001D     #pragma optsize+
; 0000 001E     #endif
; 0000 001F 
; 0000 0020     // Input/Output Ports initialization
; 0000 0021     // Port B initialization
; 0000 0022     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0023     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0024     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0025     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0026 
; 0000 0027     // Port C initialization
; 0000 0028     // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0029     DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 002A     // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 002B     PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 002C 
; 0000 002D     // Port D initialization
; 0000 002E     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 002F     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0030     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0031     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0032 
; 0000 0033     // TWI initialization
; 0000 0034     // Mode: TWI Master
; 0000 0035     // Bit Rate: 100 kHz
; 0000 0036     twi_master_init(100);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0037 
; 0000 0038     // Alphanumeric LCD initialization
; 0000 0039     // Connections are specified in the
; 0000 003A     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 003B     // RS - PORTD Bit 0
; 0000 003C     // RD - PORTD Bit 1
; 0000 003D     // EN - PORTD Bit 2
; 0000 003E     // D4 - PORTD Bit 4
; 0000 003F     // D5 - PORTD Bit 5
; 0000 0040     // D6 - PORTD Bit 6
; 0000 0041     // D7 - PORTD Bit 7
; 0000 0042     // Characters/line: 20
; 0000 0043     lcd_init(20);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0044 
; 0000 0045     // Global enable interrupts
; 0000 0046     #asm("sei")
;PCODE: $0000005A VOL: 0
	sei
;PCODE: $0000005B VOL: 0
; 0000 0047 #define ADDR_1 1
; 0000 0048 #define ADDR_2 4
; 0000 0049 
; 0000 004A 	ds1621_init(ADDR_1, 30, 35, 0);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 004B 	ds1621_init(ADDR_2, 30, 35, 0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 004C 
; 0000 004D     while (1) {
;PCODE: $0000006C VOL: 0
; 0000 004E 
; 0000 004F     	delay_ms(100);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0050 
; 0000 0051         t0 = ds1621_temperature_10(ADDR_1);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0052         t1 = ds1621_temperature_10(ADDR_2);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0053         lcd_clear();
;PCODE: $00000076 VOL: 0
; 0000 0054     	lcd_gotoxy(0, 0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0055         sprint_temp(lcd_buf, t0, 0);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0056 
; 0000 0057         lcd_puts(lcd_buf);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0058         lcd_gotoxy(0, 1);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0059 
; 0000 005A         sprint_temp(lcd_buf, t1, 1);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 005B         lcd_puts(lcd_buf);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 005C     }
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 005D }
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
