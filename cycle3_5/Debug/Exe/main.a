;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10/15/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;typedef unsigned char uint8_t;
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <stdio.h>
;
;// Declare your global variables here
;
;uint8_t sec = 0;
;uint8_t min = 0;
;uint8_t h = 0;
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 0028 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0029 // Place your code here
; 0000 002A 	sec += 1;
;PCODE: $0000000F VOL: 0
; 0000 002B     if (sec == 60) {
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002C     	sec = 0;
;PCODE: $00000013 VOL: 0
; 0000 002D         min += 1;
;PCODE: $00000014 VOL: 0
; 0000 002E         if (min == 60) {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002F         	min = 0;
;PCODE: $00000018 VOL: 0
; 0000 0030             h += 1;
;PCODE: $00000019 VOL: 0
; 0000 0031             if (h == 12) {
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0032             	h = 0;
;PCODE: $0000001D VOL: 0
; 0000 0033             }
; 0000 0034         }
;PCODE: $0000001E VOL: 0
; 0000 0035 
; 0000 0036     }
;PCODE: $0000001F VOL: 0
; 0000 0037 
; 0000 0038 }
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;
;void main(void)
; 0000 003B {
;PCODE: $00000024 VOL: 0
; 0000 003C // Declare your local variables here
; 0000 003D char buf[100];
; 0000 003E char mode = 0;
; 0000 003F // Crystal Oscillator division factor: 1
; 0000 0040 #pragma optsize-
; 0000 0041 CLKPR=(1<<CLKPCE);
;PCODE: $00000025 VOL: 0
;	buf -> Y+0
;	mode -> R17
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0042 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0043 #ifdef _OPTIMIZE_SIZE_
; 0000 0044 #pragma optsize+
; 0000 0045 #endif
; 0000 0046 // Input/Output Ports initialization
; 0000 0047 // Port B initialization
; 0000 0048 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0049 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 004A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 004B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 004C 
; 0000 004D // Port C initialization
; 0000 004E // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 004F DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0050 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0051 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0052 
; 0000 0053 // Port D initialization
; 0000 0054 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0055 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0056 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0057 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0058 
; 0000 0059 // Timer/Counter 2 initialization
; 0000 005A // Clock source: Crystal on TOSC1 pin
; 0000 005B // Clock value: PCK2/128
; 0000 005C // Mode: Normal top=0xFF
; 0000 005D // OC2A output: Disconnected
; 0000 005E // OC2B output: Disconnected
; 0000 005F ASSR=(0<<EXCLK) | (1<<AS2);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0060 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0061 TCCR2B=(0<<WGM22) | (1<<CS22) | (0<<CS21) | (1<<CS20);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0062 TCNT2=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0063 OCR2A=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0064 OCR2B=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0065 
; 0000 0066 // Timer/Counter 2 Interrupt(s) initialization
; 0000 0067 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (1<<TOIE2);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0068 
; 0000 0069 // Alphanumeric LCD initialization
; 0000 006A // Connections are specified in the
; 0000 006B // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 006C // RS - PORTD Bit 0
; 0000 006D // RD - PORTD Bit 1
; 0000 006E // EN - PORTD Bit 2
; 0000 006F // D4 - PORTD Bit 4
; 0000 0070 // D5 - PORTD Bit 5
; 0000 0071 // D6 - PORTD Bit 6
; 0000 0072 // D7 - PORTD Bit 7
; 0000 0073 // Characters/line: 20
; 0000 0074 lcd_init(20);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0075 
; 0000 0076 // Global enable interrupts
; 0000 0077 #asm("sei")
;PCODE: $00000048 VOL: 0
	sei
;PCODE: $00000049 VOL: 0
; 0000 0078 
; 0000 0079 while (1)
;PCODE: $0000004A VOL: 0
; 0000 007A       {
; 0000 007B       		lcd_gotoxy(0,0);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 007C 
; 0000 007D       		sprintf(buf, "%02d:%02d:%02d", h, min, sec);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 007E             lcd_puts(buf);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 007F             mode =2;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0080             if (mode) {
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0081              	switch(mode) {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0082                 case 1:
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0083                 	lcd_gotoxy(1,1);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0084                     break;
;PCODE: $0000006F VOL: 0
; 0000 0085                 case 2:
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0086                     lcd_gotoxy(1,4);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0087                     break;
;PCODE: $00000077 VOL: 0
; 0000 0088                 case 3:
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0089                     lcd_gotoxy(0,1);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 008A                     break;
;PCODE: $0000007F VOL: 0
; 0000 008B             	}
;PCODE: $00000080 VOL: 0
; 0000 008C                 lcd_puts("^");
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 008D             }
; 0000 008E 
; 0000 008F             delay_ms(100);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0090 
; 0000 0091       }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0092 }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0

	.DSEG
_0x10:
	.BYTE 0x2
